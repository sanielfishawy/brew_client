import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';
import produce from "immer"


const initialState = {
  worts: [
    {
      id: 0,
      name: 'wort0',
      tilt_color: 'color0',
      temp: 0,
      set_temp: 0,
      hysteresis: 0,
      specific_gravity: 'sg0',
      cooler_shelby_addr: 'csa0',
      heater_shelby_addr: 'hsa0',
      rssi: 'rssi0'
    },
    {
      id: 1,
      name: 'wort1',
      tilt_color: 'color1',
      temp: 1,
      set_temp: 1,
      hysteresis: 1,
      specific_gravity: 'sg1',
      cooler_shelby_addr: 'csa1',
      heater_shelby_addr: 'hsa1',
      rssi: 'rssi1'
    },
    {
      id: 2,
      name: 'wort2',
      tilt_color: 'color2',
      temp: 2,
      set_temp: 2,
      hysteresis: 2,
      specific_gravity: 'sg2',
      cooler_shelby_addr: 'csa2',
      heater_shelby_addr: 'hsa2',
      rssi: 'rssi2'
    },
    {
      id: 3,
      name: 'wort3',
      tilt_color: 'color3',
      temp: 3,
      set_temp: 3,
      hysteresis: 3,
      specific_gravity: 'sg3',
      cooler_shelby_addr: 'csa3',
      heater_shelby_addr: 'hsa3',
      rssi: 'rssi3'
    },
  ],
  chiller_shelby_addr: 'chiller_shelby'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const brewSlice = createSlice({
  name: 'brew',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    updateWort: (state, action) => {
      state.worts[action.payload.wort_id] = action.payload.wort
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount, updateWort } = brewSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default brewSlice.reducer;
